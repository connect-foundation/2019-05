type Team {
    seq: Int!
    name: String!
    logo: String
    homeArea: Area
    introduction: String
    win: Int!
    draw: Int!
    lose: Int!
    rating: Int!
    members: [Player!]
    uploadMatchList: [Match!]
    matchingDoneList: [Match!]
    onApplyingList: [Apply!]
}

type Player {
    seq: Int!
    playerId: String!
    team: Team
    name: String
    phone: String
    email: String
    notiList: [Notifier!]
}

enum Result {
    HOST
    GUEST
    DRAW
}
enum Area{
    SB
    SN
    DN
    DB
}

type Match {
    seq: Int!
    host: Team
    guest: Team
    stadium: String!
    area: Area
    date: String
    startTime: String
    endTime: String
    description: String
    result: Result
    appliedLists: [Apply!]
}

type Apply{
    seq: Int!
    team: Team
    match: Match
}

type Notifier{
    seq: Int!
    player: Player!
    area: Area
    date: String
    startTime: String
    endTime: String
}

type Stadium {
    seq: Int!
    name: String
    address: String
}

type Query {
    Matches(seq:Int, area:Area, host:Int): [Match!]
    PendingMatches(host:Int): [Match!]
    Match(seq:Int): Match
    Teams(seq: Int): [Team]
    Team(seq:Int): Team
    Players(seq:Int, playerId:String, team:Int): [Player]
    Player(seq: Int, playerId: String): Player
    Notifiers(seq:Int, player:Int): [Notifier]
    Notifier(seq:Int): Notifier

}

type Mutation {
    CreateTeam(name: String, logo:String, homeArea: Area, introduction: String ): Team
    CreatePlayer(playerId:String, team:Int, name: String, phone: String, email:String): Player
    CreateMatch(host: Int, stadium: String, area:Area, date:String, startTime: String, endTime: String, description: String): Match
    MatchGuest(seq: Int, guest: Int): Match

}
