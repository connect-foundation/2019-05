type Team {
  seq: Int!
  name: String!
  logo: String
  homeArea: Area
  introduction: String
  win: Int!
  draw: Int!
  lose: Int!
  rating: Int!
  teamUniqueId: String!
  owner: Player
  members: [Player!]
  uploadMatchList: [Match!]
  matchingDoneList: [Match!]
  onApplyingList: [Apply!]
}

type Player {
  seq: Int!
  playerId: String!
  team: Team
  name: String
  phone: String
  email: String
  authProvider: Auth!
  notiList: [Notifier!]
  uploadMatchList: [Match!]
  teamCreate: [Team]
  applyingList: [Apply]
}
enum Auth {
  KAKAO
  NAVER
}
enum Result {
  HOST
  GUEST
  DRAW
}
enum Area {
  CNO
  CGS
  YSN
  SDG
  KJI
  TDM
  CNG
  SBK
  KBK
  TBG
  NWN
  UPG
  SDM
  MPO
  YGC
  KSS
  KRO
  KCN
  YDP
  TJK
  KNK
  SCO
  KNM
  SPA
  KDG
}

type Match {
  seq: Int!
  author: Player!
  host: Team!
  guest: Team
  status: Status!
  stadium: String!
  address: String
  area: Area!
  date: String!
  startTime: String!
  endTime: String!
  description: String
  result: Result
  appliedLists: [Apply!]
}

type MatchConnection {
  hasNext: Boolean
}

enum Status {
  OPEN
  CLOSED
}

type Apply {
  seq: Int!
  team: Team
  player: Player
  match: Match
}

type Notifier {
  seq: Int!
  player: Player!
  area: [Area]
  date: String
  startTime: String
  endTime: String
}

type Stadium {
  seq: Int!
  name: String
  address: String
}

type Query {
  Matches(seq: Int, area: Area, host: Int): [Match!]
  PendingMatches(
    first: Int
    skip: Int
    area: [Area]
    startTime: String
    endTime: String
    date: String
  ): [Match!]
  Match(seq: Int): Match
  Teams(seq: Int): [Team]
  Team(seq: Int, teamUniqueId: String, date: String): Team
  Players(seq: Int, playerId: String, team: Int): [Player]
  Player(seq: Int, playerId: String): Player
  Notifiers(seq: Int, player: Int): [Notifier]
  Notifier(seq: Int): Notifier
  MatchConnection(first: Int
    skip: Int
    area: [Area]
    startTime: String
    endTime: String
    date: String) : MatchConnection
}

type Mutation {
    CreateTeam(name:String, teamUniqueId:String, owner:Int): Team
    CreatePlayer(playerId:String, team:Int, name: String, phone: String, email:String): Player
    CreateMatch(host: Int, author:String, stadium: String, area:Area, date:String, startTime: String, endTime: String, description: String, address: String): Match
    MatchGuest(seq: Int, guest: Int): Match
    CreateNotifier(player:Int, area:[Area], date:String, startTime: String, endTime: String): Notifier
    UpdateTeamInfo(seq: Int, name: String, logo: String, homeArea: Area, introduction: String): Team
    ApplyMatch(team: Int, player:Int, match: Int): Apply
    UpdatePlayerInfo(seq: Int, name: String, phone: String, email: String): Player
    UpdatePlayersTeamInfo(seq: Int, teamUniqueId: String): Player
    DeleteNotifier(seq: Int): Notifier
}
